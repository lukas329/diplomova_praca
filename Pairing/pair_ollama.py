import pandas as pd
import ollama
from sentence_transformers import SentenceTransformer
import numpy as np
import re

# ‚úÖ Naƒç√≠tanie CSV s√∫borov
our_products = pd.read_csv("db.csv")  # Oƒçak√°va stƒ∫pce: our_id, name
market_products = pd.read_csv("sql.csv")  # Oƒçak√°va stƒ∫pce: market_id, market_name

# ‚úÖ Pou≈æijeme lep≈°√≠ embedding model na presnej≈°ie p√°rovanie
embed_model = SentenceTransformer("sentence-transformers/all-mpnet-base-v2")
our_embeddings = np.array([embed_model.encode(name) for name in our_products["name"]])


def get_top_candidates(market_name, our_df, our_embeddings, threshold=0.5):
    """ N√°jde kandid√°tov na z√°klade cosine similarity > 50% """
    market_embedding = embed_model.encode(market_name)
    similarities = np.dot(our_embeddings, market_embedding)

    # ‚úÖ Odfiltrujeme produkty s podobnos≈•ou pod 50%
    indices = np.where(similarities > threshold)[0]

    if len(indices) == 0:
        return None  # Ak niƒç nevyhovuje, rovno vr√°time NULL

    return our_df.iloc[indices]  # Vr√°time len relevantn√© produkty


def extract_id(text):
    """ Extrahuje iba posledn√© ƒç√≠slo z odpovede alebo vr√°ti NULL. """
    text = text.strip()

    # ‚úÖ Ignorujeme v≈°etko pred a po ƒç√≠sle
    match = re.findall(r"\b\d+\b", text)
    if match:
        return match[-1]  # ‚úÖ Vr√°time posledn√© ƒç√≠slo (najpravdepodobnej≈°ia odpoveƒè)

    return "NULL"


def get_matching_product(market_name: str, candidates) -> str:
    """ Pou≈æije Command R7B na v√Ωber najlep≈°ieho kandid√°ta alebo NULL. """

    if candidates is None or candidates.empty:
        print(f"‚õî ≈Ωiadna relevantn√° zhoda pre '{market_name}', odpoveƒè: NULL")
        return "NULL"

    # üîπ Vytvor√≠me prompt s kandid√°tmi
    product_list = "\n".join([f"- {row['our_id']}: {row['name']}" for _, row in candidates.iterrows()])
    prompt = f"""Vyber spr√°vne ID (our_id) pre dan√Ω market produkt.

Market produkt: "{market_name}"

Mo≈ænosti v√Ωberu:
{product_list}

Pravidl√°:
- Ak existuje vhodn√Ω produkt, odp√≠≈° IBA **ƒç√≠slo our_id**.
- Ak ≈æiadny produkt nevyhovuje, odp√≠≈° **presne**: NULL.
- Nep√≠≈° niƒç in√©! ≈Ωiadne vysvetlenia, iba odpoveƒè.

Odpoveƒè:
"""

    print("\n==== PROMPT ====")
    print(prompt)
    print("=================\n")

    # üîπ Volanie Ollamy s modelom Command R7B
    response = ollama.chat(
        model="command-r7b",
        messages=[{"role": "user", "content": prompt}],
        options={
            "temperature": 0.1,  # Minim√°lna n√°hodnos≈•
            "num_predict": 5,  # Obmedzen√° dƒ∫≈æka odpovede
            "max_tokens": 5  # Odpoveƒè nesmie by≈• dlh≈°ia ako 5 tokenov
        }
    )

    raw_result = response['message']['content'].strip()
    print(f"üìú RAW OUTPUT: {raw_result}")  # Debugging

    # ‚úÖ Extrahujeme len ID alebo NULL
    return extract_id(raw_result)


# ‚úÖ Spracovanie v≈°etk√Ωch produktov
matched_results = []

for _, row in market_products.iterrows():
    market_name = row["market_name"]
    candidates = get_top_candidates(market_name, our_products, our_embeddings)

    # Pou≈æitie Command R7B na fin√°lne rozhodnutie
    matched_id = get_matching_product(market_name, candidates)

    matched_results.append({
        "market_id": row["market_id"],
        "market_name": market_name,
        "matched_our_id": matched_id
    })
    print(f"‚úÖ {market_name} -> {matched_id}")

# ‚úÖ Ulo≈æenie v√Ωsledkov
matched_df = pd.DataFrame(matched_results)
matched_df.to_csv("matched_products.csv", index=False)

print("‚úÖ V√Ωsledky boli ulo≈æen√© do 'matched_products.csv'.")